(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-sort T@Ref 0)
(define-fun EmptyKeySet () (Array Int Bool) ((as const (Array Int Bool)) false))
(define-fun KeySetContains ((x Int) (s (Array Int Bool))) Bool (select s x))
(define-fun KeySetAddF ((s (Array Int Bool)) (x Int)) (Array Int Bool) (store s x true))
(define-fun KeySetIntersectF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map and) s1 s2))
(define-fun KeySetUnionF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map or) s1 s2))
(define-fun KeySetComF ((s (Array Int Bool))) (Array Int Bool) ((_ map not) s))
(define-fun KeySetDiffF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) (KeySetIntersectF s1 (KeySetComF s2)))
(define-fun KeySetSubset ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetDiffF s1 s2)))
(define-fun KeySetsEqual ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= s1 s2))
(define-fun KeySetsDisjoint ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetIntersectF s1 s2)))
(define-fun EmptyRefSet () (Array T@Ref Bool) ((as const (Array T@Ref Bool)) false))
(define-fun RefSetContains ((x T@Ref) (s (Array T@Ref Bool))) Bool (select s x))
(define-fun RefSetAddF ((s (Array T@Ref Bool)) (x T@Ref)) (Array T@Ref Bool) (store s x true))
(define-fun RefSetIntersectF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map and) s1 s2))
(define-fun RefSetUnionF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map or) s1 s2))
(define-fun RefSetComF ((s (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map not) s))
(define-fun RefSetDiffF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) (RefSetIntersectF s1 (RefSetComF s2)))
(define-fun RefSetSubset ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetDiffF s1 s2)))
(define-fun RefSetsEqual ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= s1 s2))
(define-fun RefSetsDisjoint ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetIntersectF s1 s2)))
(declare-fun x () T@Ref)
(declare-fun null () T@Ref)
(declare-fun C.prev () (Array T@Ref T@Ref))
(declare-fun C.repr () (Array T@Ref (Array T@Ref Bool)))
(declare-fun C.next () (Array T@Ref T@Ref))
(declare-fun C.keys () (Array T@Ref (Array Int Bool)))
(declare-fun C.k () (Array T@Ref Int))
(declare-fun C.sorted () (Array T@Ref Bool))
(declare-fun Br@1 () (Array T@Ref Bool))
(declare-fun Br () (Array T@Ref Bool))
(declare-fun Br@0 () (Array T@Ref Bool))
(set-info :boogie-vc-id AssertLCAndRemove)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not (=> (= (ControlFlow 0 0) 6) (let ((GeneratedUnifiedExit_correct (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x)))))))) (= Br@1 (store Br x false)))) (=> (=> (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x)))))))) (= Br@1 (store Br x false))) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (or (= x null) (not (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x))))))))) (= Br@1 Br))))))) (let ((anon2_Else_correct (=> (not (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x))))))))) (=> (and (= Br@1 Br) (= (ControlFlow 0 5) 2)) GeneratedUnifiedExit_correct)))) (let ((anon2_Then_correct (=> (and (and (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x)))))))) (= Br@0 (store Br x false))) (and (= Br@1 Br@0) (= (ControlFlow 0 4) 2))) GeneratedUnifiedExit_correct))) (let ((anon0_correct (and (=> (= (ControlFlow 0 6) 4) anon2_Then_correct) (=> (= (ControlFlow 0 6) 5) anon2_Else_correct)))) anon0_correct)))))))
(check-sat)
(pop 1)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-sort T@Ref 0)
(define-fun EmptyKeySet () (Array Int Bool) ((as const (Array Int Bool)) false))
(define-fun KeySetContains ((x Int) (s (Array Int Bool))) Bool (select s x))
(define-fun KeySetAddF ((s (Array Int Bool)) (x Int)) (Array Int Bool) (store s x true))
(define-fun KeySetIntersectF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map and) s1 s2))
(define-fun KeySetUnionF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map or) s1 s2))
(define-fun KeySetComF ((s (Array Int Bool))) (Array Int Bool) ((_ map not) s))
(define-fun KeySetDiffF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) (KeySetIntersectF s1 (KeySetComF s2)))
(define-fun KeySetSubset ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetDiffF s1 s2)))
(define-fun KeySetsEqual ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= s1 s2))
(define-fun KeySetsDisjoint ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetIntersectF s1 s2)))
(define-fun EmptyRefSet () (Array T@Ref Bool) ((as const (Array T@Ref Bool)) false))
(define-fun RefSetContains ((x T@Ref) (s (Array T@Ref Bool))) Bool (select s x))
(define-fun RefSetAddF ((s (Array T@Ref Bool)) (x T@Ref)) (Array T@Ref Bool) (store s x true))
(define-fun RefSetIntersectF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map and) s1 s2))
(define-fun RefSetUnionF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map or) s1 s2))
(define-fun RefSetComF ((s (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map not) s))
(define-fun RefSetDiffF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) (RefSetIntersectF s1 (RefSetComF s2)))
(define-fun RefSetSubset ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetDiffF s1 s2)))
(define-fun RefSetsEqual ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= s1 s2))
(define-fun RefSetsDisjoint ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetIntersectF s1 s2)))
(declare-fun ret@0 () T@Ref)
(declare-fun null () T@Ref)
(declare-fun C.prev@7 () (Array T@Ref T@Ref))
(declare-fun C.repr@4 () (Array T@Ref (Array T@Ref Bool)))
(declare-fun C.next@5 () (Array T@Ref T@Ref))
(declare-fun C.keys@4 () (Array T@Ref (Array Int Bool)))
(declare-fun C.k@3 () (Array T@Ref Int))
(declare-fun C.sorted@3 () (Array T@Ref Bool))
(declare-fun x () T@Ref)
(declare-fun C.k () (Array T@Ref Int))
(declare-fun k () Int)
(declare-fun C.keys () (Array T@Ref (Array Int Bool)))
(declare-fun C.repr () (Array T@Ref (Array T@Ref Bool)))
(declare-fun alloc@3 () (Array T@Ref Bool))
(declare-fun alloc () (Array T@Ref Bool))
(declare-fun C.prev () (Array T@Ref T@Ref))
(declare-fun Br@23 () (Array T@Ref Bool))
(declare-fun oldnext@0 () T@Ref)
(declare-fun C.next@3 () (Array T@Ref T@Ref))
(declare-fun C.prev@5 () (Array T@Ref T@Ref))
(declare-fun C.prev@4 () (Array T@Ref T@Ref))
(declare-fun call10formal@ret@0 () T@Ref)
(declare-fun Br@15 () (Array T@Ref Bool))
(declare-fun Br@14 () (Array T@Ref Bool))
(declare-fun C.next@4 () (Array T@Ref T@Ref))
(declare-fun Br@16 () (Array T@Ref Bool))
(declare-fun C.repr@2 () (Array T@Ref (Array T@Ref Bool)))
(declare-fun C.keys@2 () (Array T@Ref (Array Int Bool)))
(declare-fun C.k@2 () (Array T@Ref Int))
(declare-fun C.sorted@2 () (Array T@Ref Bool))
(declare-fun Br@17 () (Array T@Ref Bool))
(declare-fun Br@18 () (Array T@Ref Bool))
(declare-fun call1formal@keys@0 () (Array Int Bool))
(declare-fun C.keys@3 () (Array T@Ref (Array Int Bool)))
(declare-fun Br@19 () (Array T@Ref Bool))
(declare-fun call1formal@repr@0 () (Array T@Ref Bool))
(declare-fun C.repr@3 () (Array T@Ref (Array T@Ref Bool)))
(declare-fun Br@20 () (Array T@Ref Bool))
(declare-fun C.prev@6 () (Array T@Ref T@Ref))
(declare-fun Br@21 () (Array T@Ref Bool))
(declare-fun Br@22 () (Array T@Ref Bool))
(declare-fun alloc@2 () (Array T@Ref Bool))
(declare-fun call0formal@x@0 () T@Ref)
(declare-fun call0formal@x@0@@0 () T@Ref)
(declare-fun C.next () (Array T@Ref T@Ref))
(declare-fun Br () (Array T@Ref Bool))
(declare-fun C.sorted () (Array T@Ref Bool))
(define-fun Frame_k ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int) ((_ map (ite (Bool Int Int) (Int))) mod post pre))
(define-fun Frame_next ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref) ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre))
(define-fun Frame_prev ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref) ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre))
(define-fun Frame_keys ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array Int Bool))) (post (Array T@Ref (Array Int Bool)))) (Array T@Ref (Array Int Bool)) ((_ map (ite (Bool (Array Int Bool) (Array Int Bool)) (Array Int Bool))) mod post pre))
(define-fun Frame_repr ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array T@Ref Bool))) (post (Array T@Ref (Array T@Ref Bool)))) (Array T@Ref (Array T@Ref Bool)) ((_ map (ite (Bool (Array T@Ref Bool) (Array T@Ref Bool)) (Array T@Ref Bool))) mod post pre))
(define-fun Frame_sorted ((mod (Array T@Ref Bool)) (pre (Array T@Ref Bool)) (post (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map (ite (Bool Bool Bool) (Bool))) mod post pre))
(declare-fun call0formal@x@0@@1 () T@Ref)
(declare-fun call6formal@node@0 () T@Ref)
(declare-fun alloc@1 () (Array T@Ref Bool))
(declare-fun C.k@1 () (Array T@Ref Int))
(declare-fun C.next@1 () (Array T@Ref T@Ref))
(declare-fun C.prev@1 () (Array T@Ref T@Ref))
(declare-fun Br@5 () (Array T@Ref Bool))
(declare-fun C.next@2 () (Array T@Ref T@Ref))
(declare-fun Br@6 () (Array T@Ref Bool))
(declare-fun C.prev@2 () (Array T@Ref T@Ref))
(declare-fun Br@7 () (Array T@Ref Bool))
(declare-fun call1formal@keys@0@@0 () (Array Int Bool))
(declare-fun C.keys@1 () (Array T@Ref (Array Int Bool)))
(declare-fun Br@8 () (Array T@Ref Bool))
(declare-fun call1formal@repr@0@@0 () (Array T@Ref Bool))
(declare-fun C.repr@1 () (Array T@Ref (Array T@Ref Bool)))
(declare-fun Br@9 () (Array T@Ref Bool))
(declare-fun C.sorted@1 () (Array T@Ref Bool))
(declare-fun Br@10 () (Array T@Ref Bool))
(declare-fun C.prev@3 () (Array T@Ref T@Ref))
(declare-fun Br@11 () (Array T@Ref Bool))
(declare-fun Br@12 () (Array T@Ref Bool))
(declare-fun Br@13 () (Array T@Ref Bool))
(declare-fun call6formal@node@0@@0 () T@Ref)
(declare-fun alloc@0 () (Array T@Ref Bool))
(declare-fun C.k@0 () (Array T@Ref Int))
(declare-fun C.next@0 () (Array T@Ref T@Ref))
(declare-fun C.prev@0 () (Array T@Ref T@Ref))
(declare-fun Br@0 () (Array T@Ref Bool))
(declare-fun call1formal@keys@0@@1 () (Array Int Bool))
(declare-fun C.keys@0 () (Array T@Ref (Array Int Bool)))
(declare-fun Br@1 () (Array T@Ref Bool))
(declare-fun call1formal@repr@0@@1 () (Array T@Ref Bool))
(declare-fun C.repr@0 () (Array T@Ref (Array T@Ref Bool)))
(declare-fun Br@2 () (Array T@Ref Bool))
(declare-fun C.sorted@0 () (Array T@Ref Bool))
(declare-fun Br@3 () (Array T@Ref Bool))
(declare-fun Br@4 () (Array T@Ref Bool))
(set-info :boogie-vc-id SortedListInsert)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not (=> (= (ControlFlow 0 0) 26) (let ((GeneratedUnifiedExit_correct (and (=> (= (ControlFlow 0 2) (- 0 11)) (not (= ret@0 null))) (=> (not (= ret@0 null)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (=> (not (= ret@0 null)) (and (and (=> (not (= (select C.prev@7 ret@0) null)) (and (not (select (select C.repr@4 ret@0) (select C.prev@7 ret@0))) (= (select C.next@5 (select C.prev@7 ret@0)) ret@0))) (=> (= (select C.next@5 ret@0) null) (and (KeySetsEqual (select C.keys@4 ret@0) (store EmptyKeySet (select C.k@3 ret@0) true)) (RefSetsEqual (select C.repr@4 ret@0) (store EmptyRefSet ret@0 true))))) (=> (not (= (select C.next@5 ret@0) null)) (and (and (and (and (and (and (select (select C.repr@4 ret@0) (select C.next@5 ret@0)) (not (select (select C.repr@4 (select C.next@5 ret@0)) ret@0))) (KeySetsEqual (select C.keys@4 ret@0) (store (select C.keys@4 (select C.next@5 ret@0)) (select C.k@3 ret@0) true))) (RefSetsEqual (select C.repr@4 ret@0) (store (select C.repr@4 (select C.next@5 ret@0)) ret@0 true))) (= (select C.prev@7 (select C.next@5 ret@0)) ret@0)) (=> (select C.sorted@3 ret@0) (<= (select C.k@3 ret@0) (select C.k@3 (select C.next@5 ret@0))))) (= (select C.sorted@3 ret@0) (select C.sorted@3 (select C.next@5 ret@0)))))))) (=> (=> (not (= ret@0 null)) (and (and (=> (not (= (select C.prev@7 ret@0) null)) (and (not (select (select C.repr@4 ret@0) (select C.prev@7 ret@0))) (= (select C.next@5 (select C.prev@7 ret@0)) ret@0))) (=> (= (select C.next@5 ret@0) null) (and (KeySetsEqual (select C.keys@4 ret@0) (store EmptyKeySet (select C.k@3 ret@0) true)) (RefSetsEqual (select C.repr@4 ret@0) (store EmptyRefSet ret@0 true))))) (=> (not (= (select C.next@5 ret@0) null)) (and (and (and (and (and (and (select (select C.repr@4 ret@0) (select C.next@5 ret@0)) (not (select (select C.repr@4 (select C.next@5 ret@0)) ret@0))) (KeySetsEqual (select C.keys@4 ret@0) (store (select C.keys@4 (select C.next@5 ret@0)) (select C.k@3 ret@0) true))) (RefSetsEqual (select C.repr@4 ret@0) (store (select C.repr@4 (select C.next@5 ret@0)) ret@0 true))) (= (select C.prev@7 (select C.next@5 ret@0)) ret@0)) (=> (select C.sorted@3 ret@0) (<= (select C.k@3 ret@0) (select C.k@3 (select C.next@5 ret@0))))) (= (select C.sorted@3 ret@0) (select C.sorted@3 (select C.next@5 ret@0))))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (select C.sorted@3 ret@0)) (=> (select C.sorted@3 ret@0) (and (=> (= (ControlFlow 0 2) (- 0 8)) (= (select C.k@3 ret@0) (ite (and (not (= x null)) (<= (select C.k x) k)) (select C.k x) k))) (=> (= (select C.k@3 ret@0) (ite (and (not (= x null)) (<= (select C.k x) k)) (select C.k x) k)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (KeySetsEqual (select C.keys@4 ret@0) (store (ite (= x null) EmptyKeySet (select C.keys x)) k true))) (=> (KeySetsEqual (select C.keys@4 ret@0) (store (ite (= x null) EmptyKeySet (select C.keys x)) k true)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (and (and (RefSetSubset (RefSetDiffF (select C.repr@4 ret@0) (ite (= x null) EmptyRefSet (select C.repr x))) alloc@3) (RefSetsDisjoint (RefSetDiffF (select C.repr@4 ret@0) (ite (= x null) EmptyRefSet (select C.repr x))) alloc)) (RefSetSubset alloc alloc@3))) (=> (and (and (RefSetSubset (RefSetDiffF (select C.repr@4 ret@0) (ite (= x null) EmptyRefSet (select C.repr x))) alloc@3) (RefSetsDisjoint (RefSetDiffF (select C.repr@4 ret@0) (ite (= x null) EmptyRefSet (select C.repr x))) alloc)) (RefSetSubset alloc alloc@3)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (select C.prev@7 ret@0) null)) (=> (= (select C.prev@7 ret@0) null) (and (=> (= (ControlFlow 0 2) (- 0 4)) (=> (not (= x null)) (or (= ret@0 x) (= (select C.next@5 ret@0) x)))) (=> (=> (not (= x null)) (or (= ret@0 x) (= (select C.next@5 ret@0) x))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (=> (or (= x null) (= (select C.prev x) null)) (RefSetsEqual Br@23 EmptyRefSet))) (=> (=> (or (= x null) (= (select C.prev x) null)) (RefSetsEqual Br@23 EmptyRefSet)) (=> (= (ControlFlow 0 2) (- 0 1)) (=> (and (not (= x null)) (not (= (select C.prev x) null))) (RefSetsEqual Br@23 (store EmptyRefSet (select C.prev x) true)))))))))))))))))))))))) (let ((anon7_correct (=> (and (= oldnext@0 (select C.next@3 x)) (= C.prev@5 (store C.prev@4 call10formal@ret@0 x))) (=> (and (and (and (and (and (=> (not (= (select C.prev@4 call10formal@ret@0) null)) (= Br@15 (store (store Br@14 call10formal@ret@0 true) (select C.prev@4 call10formal@ret@0) true))) (=> (= (select C.prev@4 call10formal@ret@0) null) (= Br@15 (store Br@14 call10formal@ret@0 true)))) (and (= C.next@4 (store C.next@3 x call10formal@ret@0)) (=> (not (= (select C.next@3 x) null)) (= Br@16 (store (store Br@15 x true) (select C.next@3 x) true))))) (and (and (=> (= (select C.next@3 x) null) (= Br@16 (store Br@15 x true))) (=> (and (not (= call10formal@ret@0 null)) (=> (not (= call10formal@ret@0 null)) (and (and (=> (not (= (select C.prev@5 call10formal@ret@0) null)) (and (not (select (select C.repr@2 call10formal@ret@0) (select C.prev@5 call10formal@ret@0))) (= (select C.next@4 (select C.prev@5 call10formal@ret@0)) call10formal@ret@0))) (=> (= (select C.next@4 call10formal@ret@0) null) (and (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store EmptyKeySet (select C.k@2 call10formal@ret@0) true)) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store EmptyRefSet call10formal@ret@0 true))))) (=> (not (= (select C.next@4 call10formal@ret@0) null)) (and (and (and (and (and (and (select (select C.repr@2 call10formal@ret@0) (select C.next@4 call10formal@ret@0)) (not (select (select C.repr@2 (select C.next@4 call10formal@ret@0)) call10formal@ret@0))) (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store (select C.keys@2 (select C.next@4 call10formal@ret@0)) (select C.k@2 call10formal@ret@0) true))) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store (select C.repr@2 (select C.next@4 call10formal@ret@0)) call10formal@ret@0 true))) (= (select C.prev@5 (select C.next@4 call10formal@ret@0)) call10formal@ret@0)) (=> (select C.sorted@2 call10formal@ret@0) (<= (select C.k@2 call10formal@ret@0) (select C.k@2 (select C.next@4 call10formal@ret@0))))) (= (select C.sorted@2 call10formal@ret@0) (select C.sorted@2 (select C.next@4 call10formal@ret@0)))))))) (= Br@17 (store Br@16 call10formal@ret@0 false)))) (and (=> (or (= call10formal@ret@0 null) (not (=> (not (= call10formal@ret@0 null)) (and (and (=> (not (= (select C.prev@5 call10formal@ret@0) null)) (and (not (select (select C.repr@2 call10formal@ret@0) (select C.prev@5 call10formal@ret@0))) (= (select C.next@4 (select C.prev@5 call10formal@ret@0)) call10formal@ret@0))) (=> (= (select C.next@4 call10formal@ret@0) null) (and (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store EmptyKeySet (select C.k@2 call10formal@ret@0) true)) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store EmptyRefSet call10formal@ret@0 true))))) (=> (not (= (select C.next@4 call10formal@ret@0) null)) (and (and (and (and (and (and (select (select C.repr@2 call10formal@ret@0) (select C.next@4 call10formal@ret@0)) (not (select (select C.repr@2 (select C.next@4 call10formal@ret@0)) call10formal@ret@0))) (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store (select C.keys@2 (select C.next@4 call10formal@ret@0)) (select C.k@2 call10formal@ret@0) true))) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store (select C.repr@2 (select C.next@4 call10formal@ret@0)) call10formal@ret@0 true))) (= (select C.prev@5 (select C.next@4 call10formal@ret@0)) call10formal@ret@0)) (=> (select C.sorted@2 call10formal@ret@0) (<= (select C.k@2 call10formal@ret@0) (select C.k@2 (select C.next@4 call10formal@ret@0))))) (= (select C.sorted@2 call10formal@ret@0) (select C.sorted@2 (select C.next@4 call10formal@ret@0))))))))) (= Br@17 Br@16)) (=> (and (not (= oldnext@0 null)) (=> (not (= oldnext@0 null)) (and (and (=> (not (= (select C.prev@5 oldnext@0) null)) (and (not (select (select C.repr@2 oldnext@0) (select C.prev@5 oldnext@0))) (= (select C.next@4 (select C.prev@5 oldnext@0)) oldnext@0))) (=> (= (select C.next@4 oldnext@0) null) (and (KeySetsEqual (select C.keys@2 oldnext@0) (store EmptyKeySet (select C.k@2 oldnext@0) true)) (RefSetsEqual (select C.repr@2 oldnext@0) (store EmptyRefSet oldnext@0 true))))) (=> (not (= (select C.next@4 oldnext@0) null)) (and (and (and (and (and (and (select (select C.repr@2 oldnext@0) (select C.next@4 oldnext@0)) (not (select (select C.repr@2 (select C.next@4 oldnext@0)) oldnext@0))) (KeySetsEqual (select C.keys@2 oldnext@0) (store (select C.keys@2 (select C.next@4 oldnext@0)) (select C.k@2 oldnext@0) true))) (RefSetsEqual (select C.repr@2 oldnext@0) (store (select C.repr@2 (select C.next@4 oldnext@0)) oldnext@0 true))) (= (select C.prev@5 (select C.next@4 oldnext@0)) oldnext@0)) (=> (select C.sorted@2 oldnext@0) (<= (select C.k@2 oldnext@0) (select C.k@2 (select C.next@4 oldnext@0))))) (= (select C.sorted@2 oldnext@0) (select C.sorted@2 (select C.next@4 oldnext@0)))))))) (= Br@18 (store Br@17 oldnext@0 false)))))) (and (and (and (=> (or (= oldnext@0 null) (not (=> (not (= oldnext@0 null)) (and (and (=> (not (= (select C.prev@5 oldnext@0) null)) (and (not (select (select C.repr@2 oldnext@0) (select C.prev@5 oldnext@0))) (= (select C.next@4 (select C.prev@5 oldnext@0)) oldnext@0))) (=> (= (select C.next@4 oldnext@0) null) (and (KeySetsEqual (select C.keys@2 oldnext@0) (store EmptyKeySet (select C.k@2 oldnext@0) true)) (RefSetsEqual (select C.repr@2 oldnext@0) (store EmptyRefSet oldnext@0 true))))) (=> (not (= (select C.next@4 oldnext@0) null)) (and (and (and (and (and (and (select (select C.repr@2 oldnext@0) (select C.next@4 oldnext@0)) (not (select (select C.repr@2 (select C.next@4 oldnext@0)) oldnext@0))) (KeySetsEqual (select C.keys@2 oldnext@0) (store (select C.keys@2 (select C.next@4 oldnext@0)) (select C.k@2 oldnext@0) true))) (RefSetsEqual (select C.repr@2 oldnext@0) (store (select C.repr@2 (select C.next@4 oldnext@0)) oldnext@0 true))) (= (select C.prev@5 (select C.next@4 oldnext@0)) oldnext@0)) (=> (select C.sorted@2 oldnext@0) (<= (select C.k@2 oldnext@0) (select C.k@2 (select C.next@4 oldnext@0))))) (= (select C.sorted@2 oldnext@0) (select C.sorted@2 (select C.next@4 oldnext@0))))))))) (= Br@18 Br@17)) (= call1formal@keys@0 (store (ite (= (select C.next@4 x) null) EmptyKeySet (select C.keys@2 (select C.next@4 x))) (select C.k@2 x) true))) (and (= C.keys@3 (store C.keys@2 x call1formal@keys@0)) (=> (not (= (select C.prev@5 x) null)) (= Br@19 (store (store Br@18 x true) (select C.prev@5 x) true))))) (and (and (=> (= (select C.prev@5 x) null) (= Br@19 (store Br@18 x true))) (= call1formal@repr@0 (store (ite (= (select C.next@4 x) null) EmptyRefSet (select C.repr@2 (select C.next@4 x))) x true))) (and (= C.repr@3 (store C.repr@2 x call1formal@repr@0)) (=> (not (= (select C.prev@5 x) null)) (= Br@20 (store (store Br@19 x true) (select C.prev@5 x) true))))))) (and (and (and (and (=> (= (select C.prev@5 x) null) (= Br@20 (store Br@19 x true))) (= C.prev@6 (store C.prev@5 x null))) (and (=> (not (= (select C.prev@5 x) null)) (= Br@21 (store (store Br@20 x true) (select C.prev@5 x) true))) (=> (= (select C.prev@5 x) null) (= Br@21 (store Br@20 x true))))) (and (and (=> (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev@6 x) null)) (and (not (select (select C.repr@3 x) (select C.prev@6 x))) (= (select C.next@4 (select C.prev@6 x)) x))) (=> (= (select C.next@4 x) null) (and (KeySetsEqual (select C.keys@3 x) (store EmptyKeySet (select C.k@2 x) true)) (RefSetsEqual (select C.repr@3 x) (store EmptyRefSet x true))))) (=> (not (= (select C.next@4 x) null)) (and (and (and (and (and (and (select (select C.repr@3 x) (select C.next@4 x)) (not (select (select C.repr@3 (select C.next@4 x)) x))) (KeySetsEqual (select C.keys@3 x) (store (select C.keys@3 (select C.next@4 x)) (select C.k@2 x) true))) (RefSetsEqual (select C.repr@3 x) (store (select C.repr@3 (select C.next@4 x)) x true))) (= (select C.prev@6 (select C.next@4 x)) x)) (=> (select C.sorted@2 x) (<= (select C.k@2 x) (select C.k@2 (select C.next@4 x))))) (= (select C.sorted@2 x) (select C.sorted@2 (select C.next@4 x)))))))) (= Br@22 (store Br@21 x false))) (=> (or (= x null) (not (=> (not (= x null)) (and (and (=> (not (= (select C.prev@6 x) null)) (and (not (select (select C.repr@3 x) (select C.prev@6 x))) (= (select C.next@4 (select C.prev@6 x)) x))) (=> (= (select C.next@4 x) null) (and (KeySetsEqual (select C.keys@3 x) (store EmptyKeySet (select C.k@2 x) true)) (RefSetsEqual (select C.repr@3 x) (store EmptyRefSet x true))))) (=> (not (= (select C.next@4 x) null)) (and (and (and (and (and (and (select (select C.repr@3 x) (select C.next@4 x)) (not (select (select C.repr@3 (select C.next@4 x)) x))) (KeySetsEqual (select C.keys@3 x) (store (select C.keys@3 (select C.next@4 x)) (select C.k@2 x) true))) (RefSetsEqual (select C.repr@3 x) (store (select C.repr@3 (select C.next@4 x)) x true))) (= (select C.prev@6 (select C.next@4 x)) x)) (=> (select C.sorted@2 x) (<= (select C.k@2 x) (select C.k@2 (select C.next@4 x))))) (= (select C.sorted@2 x) (select C.sorted@2 (select C.next@4 x))))))))) (= Br@22 Br@21))) (and (= C.sorted@3 C.sorted@2) (= C.repr@4 C.repr@3)))) (and (and (and (= C.keys@4 C.keys@3) (= Br@23 Br@22)) (and (= alloc@3 alloc@2) (= C.k@3 C.k@2))) (and (and (= C.next@5 C.next@4) (= C.prev@7 C.prev@6)) (and (= ret@0 x) (= (ControlFlow 0 14) 2)))))) GeneratedUnifiedExit_correct)))) (let ((anon11_Else_correct (=> (and (= (select C.next@3 x) null) (= (ControlFlow 0 16) 14)) anon7_correct))) (let ((anon11_Then_correct (=> (and (and (not (= (select C.next@3 x) null)) (= call0formal@x@0 (select C.next@3 x))) (and (=> (and (not (= call0formal@x@0 null)) (not (select Br@14 call0formal@x@0))) (=> (not (= call0formal@x@0 null)) (and (and (=> (not (= (select C.prev@4 call0formal@x@0) null)) (and (not (select (select C.repr@2 call0formal@x@0) (select C.prev@4 call0formal@x@0))) (= (select C.next@3 (select C.prev@4 call0formal@x@0)) call0formal@x@0))) (=> (= (select C.next@3 call0formal@x@0) null) (and (KeySetsEqual (select C.keys@2 call0formal@x@0) (store EmptyKeySet (select C.k@2 call0formal@x@0) true)) (RefSetsEqual (select C.repr@2 call0formal@x@0) (store EmptyRefSet call0formal@x@0 true))))) (=> (not (= (select C.next@3 call0formal@x@0) null)) (and (and (and (and (and (and (select (select C.repr@2 call0formal@x@0) (select C.next@3 call0formal@x@0)) (not (select (select C.repr@2 (select C.next@3 call0formal@x@0)) call0formal@x@0))) (KeySetsEqual (select C.keys@2 call0formal@x@0) (store (select C.keys@2 (select C.next@3 call0formal@x@0)) (select C.k@2 call0formal@x@0) true))) (RefSetsEqual (select C.repr@2 call0formal@x@0) (store (select C.repr@2 (select C.next@3 call0formal@x@0)) call0formal@x@0 true))) (= (select C.prev@4 (select C.next@3 call0formal@x@0)) call0formal@x@0)) (=> (select C.sorted@2 call0formal@x@0) (<= (select C.k@2 call0formal@x@0) (select C.k@2 (select C.next@3 call0formal@x@0))))) (= (select C.sorted@2 call0formal@x@0) (select C.sorted@2 (select C.next@3 call0formal@x@0)))))))) (= (ControlFlow 0 15) 14))) anon7_correct))) (let ((anon5_correct (=> (= call0formal@x@0@@0 (select C.next x)) (and (=> (= (ControlFlow 0 17) (- 0 20)) (RefSetsEqual Br EmptyRefSet)) (=> (RefSetsEqual Br EmptyRefSet) (and (=> (= (ControlFlow 0 17) (- 0 19)) (=> (not (= call0formal@x@0@@0 null)) (and (and (=> (not (= (select C.prev call0formal@x@0@@0) null)) (and (not (select (select C.repr call0formal@x@0@@0) (select C.prev call0formal@x@0@@0))) (= (select C.next (select C.prev call0formal@x@0@@0)) call0formal@x@0@@0))) (=> (= (select C.next call0formal@x@0@@0) null) (and (KeySetsEqual (select C.keys call0formal@x@0@@0) (store EmptyKeySet (select C.k call0formal@x@0@@0) true)) (RefSetsEqual (select C.repr call0formal@x@0@@0) (store EmptyRefSet call0formal@x@0@@0 true))))) (=> (not (= (select C.next call0formal@x@0@@0) null)) (and (and (and (and (and (and (select (select C.repr call0formal@x@0@@0) (select C.next call0formal@x@0@@0)) (not (select (select C.repr (select C.next call0formal@x@0@@0)) call0formal@x@0@@0))) (KeySetsEqual (select C.keys call0formal@x@0@@0) (store (select C.keys (select C.next call0formal@x@0@@0)) (select C.k call0formal@x@0@@0) true))) (RefSetsEqual (select C.repr call0formal@x@0@@0) (store (select C.repr (select C.next call0formal@x@0@@0)) call0formal@x@0@@0 true))) (= (select C.prev (select C.next call0formal@x@0@@0)) call0formal@x@0@@0)) (=> (select C.sorted call0formal@x@0@@0) (<= (select C.k call0formal@x@0@@0) (select C.k (select C.next call0formal@x@0@@0))))) (= (select C.sorted call0formal@x@0@@0) (select C.sorted (select C.next call0formal@x@0@@0)))))))) (=> (=> (not (= call0formal@x@0@@0 null)) (and (and (=> (not (= (select C.prev call0formal@x@0@@0) null)) (and (not (select (select C.repr call0formal@x@0@@0) (select C.prev call0formal@x@0@@0))) (= (select C.next (select C.prev call0formal@x@0@@0)) call0formal@x@0@@0))) (=> (= (select C.next call0formal@x@0@@0) null) (and (KeySetsEqual (select C.keys call0formal@x@0@@0) (store EmptyKeySet (select C.k call0formal@x@0@@0) true)) (RefSetsEqual (select C.repr call0formal@x@0@@0) (store EmptyRefSet call0formal@x@0@@0 true))))) (=> (not (= (select C.next call0formal@x@0@@0) null)) (and (and (and (and (and (and (select (select C.repr call0formal@x@0@@0) (select C.next call0formal@x@0@@0)) (not (select (select C.repr (select C.next call0formal@x@0@@0)) call0formal@x@0@@0))) (KeySetsEqual (select C.keys call0formal@x@0@@0) (store (select C.keys (select C.next call0formal@x@0@@0)) (select C.k call0formal@x@0@@0) true))) (RefSetsEqual (select C.repr call0formal@x@0@@0) (store (select C.repr (select C.next call0formal@x@0@@0)) call0formal@x@0@@0 true))) (= (select C.prev (select C.next call0formal@x@0@@0)) call0formal@x@0@@0)) (=> (select C.sorted call0formal@x@0@@0) (<= (select C.k call0formal@x@0@@0) (select C.k (select C.next call0formal@x@0@@0))))) (= (select C.sorted call0formal@x@0@@0) (select C.sorted (select C.next call0formal@x@0@@0))))))) (and (=> (= (ControlFlow 0 17) (- 0 18)) (=> (not (= call0formal@x@0@@0 null)) (select C.sorted call0formal@x@0@@0))) (=> (=> (not (= call0formal@x@0@@0 null)) (select C.sorted call0formal@x@0@@0)) (=> (not (= call10formal@ret@0 null)) (=> (and (and (=> (not (= call10formal@ret@0 null)) (and (and (=> (not (= (select C.prev@4 call10formal@ret@0) null)) (and (not (select (select C.repr@2 call10formal@ret@0) (select C.prev@4 call10formal@ret@0))) (= (select C.next@3 (select C.prev@4 call10formal@ret@0)) call10formal@ret@0))) (=> (= (select C.next@3 call10formal@ret@0) null) (and (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store EmptyKeySet (select C.k@2 call10formal@ret@0) true)) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store EmptyRefSet call10formal@ret@0 true))))) (=> (not (= (select C.next@3 call10formal@ret@0) null)) (and (and (and (and (and (and (select (select C.repr@2 call10formal@ret@0) (select C.next@3 call10formal@ret@0)) (not (select (select C.repr@2 (select C.next@3 call10formal@ret@0)) call10formal@ret@0))) (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store (select C.keys@2 (select C.next@3 call10formal@ret@0)) (select C.k@2 call10formal@ret@0) true))) (RefSetsEqual (select C.repr@2 call10formal@ret@0) (store (select C.repr@2 (select C.next@3 call10formal@ret@0)) call10formal@ret@0 true))) (= (select C.prev@4 (select C.next@3 call10formal@ret@0)) call10formal@ret@0)) (=> (select C.sorted@2 call10formal@ret@0) (<= (select C.k@2 call10formal@ret@0) (select C.k@2 (select C.next@3 call10formal@ret@0))))) (= (select C.sorted@2 call10formal@ret@0) (select C.sorted@2 (select C.next@3 call10formal@ret@0))))))) (select C.sorted@2 call10formal@ret@0)) (and (= (select C.k@2 call10formal@ret@0) (ite (and (not (= call0formal@x@0@@0 null)) (<= (select C.k call0formal@x@0@@0) k)) (select C.k call0formal@x@0@@0) k)) (KeySetsEqual (select C.keys@2 call10formal@ret@0) (store (ite (= call0formal@x@0@@0 null) EmptyKeySet (select C.keys call0formal@x@0@@0)) k true)))) (=> (and (and (and (and (RefSetSubset (RefSetDiffF (select C.repr@2 call10formal@ret@0) (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0))) alloc@2) (RefSetsDisjoint (RefSetDiffF (select C.repr@2 call10formal@ret@0) (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0))) alloc)) (RefSetSubset alloc alloc@2)) (and (= (select C.prev@4 call10formal@ret@0) null) (=> (not (= call0formal@x@0@@0 null)) (or (= call10formal@ret@0 call0formal@x@0@@0) (= (select C.next@3 call10formal@ret@0) call0formal@x@0@@0))))) (and (and (and (=> (or (= call0formal@x@0@@0 null) (= (select C.prev call0formal@x@0@@0) null)) (RefSetsEqual Br@14 EmptyRefSet)) (=> (and (not (= call0formal@x@0@@0 null)) (not (= (select C.prev call0formal@x@0@@0) null))) (RefSetsEqual Br@14 (store EmptyRefSet (select C.prev call0formal@x@0@@0) true)))) (and (= C.k@2 (Frame_k (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.k C.k@2)) (= C.next@3 (Frame_next (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.next C.next@3)))) (and (and (= C.prev@4 (Frame_prev (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.prev C.prev@4)) (= C.keys@2 (Frame_keys (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.keys C.keys@2))) (and (= C.repr@2 (Frame_repr (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.repr C.repr@2)) (= C.sorted@2 (Frame_sorted (ite (= call0formal@x@0@@0 null) EmptyRefSet (select C.repr call0formal@x@0@@0)) C.sorted C.sorted@2)))))) (and (=> (= (ControlFlow 0 17) 15) anon11_Then_correct) (=> (= (ControlFlow 0 17) 16) anon11_Else_correct)))))))))))))) (let ((anon10_Else_correct (=> (and (= (select C.next x) null) (= (ControlFlow 0 22) 17)) anon5_correct))) (let ((anon10_Then_correct (=> (not (= (select C.next x) null)) (=> (and (and (= call0formal@x@0@@1 (select C.next x)) (=> (and (not (= call0formal@x@0@@1 null)) (not (select Br call0formal@x@0@@1))) (=> (not (= call0formal@x@0@@1 null)) (and (and (=> (not (= (select C.prev call0formal@x@0@@1) null)) (and (not (select (select C.repr call0formal@x@0@@1) (select C.prev call0formal@x@0@@1))) (= (select C.next (select C.prev call0formal@x@0@@1)) call0formal@x@0@@1))) (=> (= (select C.next call0formal@x@0@@1) null) (and (KeySetsEqual (select C.keys call0formal@x@0@@1) (store EmptyKeySet (select C.k call0formal@x@0@@1) true)) (RefSetsEqual (select C.repr call0formal@x@0@@1) (store EmptyRefSet call0formal@x@0@@1 true))))) (=> (not (= (select C.next call0formal@x@0@@1) null)) (and (and (and (and (and (and (select (select C.repr call0formal@x@0@@1) (select C.next call0formal@x@0@@1)) (not (select (select C.repr (select C.next call0formal@x@0@@1)) call0formal@x@0@@1))) (KeySetsEqual (select C.keys call0formal@x@0@@1) (store (select C.keys (select C.next call0formal@x@0@@1)) (select C.k call0formal@x@0@@1) true))) (RefSetsEqual (select C.repr call0formal@x@0@@1) (store (select C.repr (select C.next call0formal@x@0@@1)) call0formal@x@0@@1 true))) (= (select C.prev (select C.next call0formal@x@0@@1)) call0formal@x@0@@1)) (=> (select C.sorted call0formal@x@0@@1) (<= (select C.k call0formal@x@0@@1) (select C.k (select C.next call0formal@x@0@@1))))) (= (select C.sorted call0formal@x@0@@1) (select C.sorted (select C.next call0formal@x@0@@1))))))))) (and (=> (not (= (select C.next x) null)) (and (and (and (select alloc (select C.next x)) (=> (not (= (select C.next (select C.next x)) null)) (select alloc (select C.next (select C.next x))))) (=> (not (= (select C.prev (select C.next x)) null)) (select alloc (select C.prev (select C.next x))))) (RefSetSubset (select C.repr (select C.next x)) alloc))) (= (ControlFlow 0 21) 17))) anon5_correct)))) (let ((anon9_Else_correct (=> (< (select C.k x) k) (and (=> (= (ControlFlow 0 23) 21) anon10_Then_correct) (=> (= (ControlFlow 0 23) 22) anon10_Else_correct))))) (let ((anon9_Then_correct (=> (and (<= k (select C.k x)) (not (= call6formal@node@0 null))) (=> (and (and (and (not (select alloc call6formal@node@0)) (= alloc@1 (store alloc call6formal@node@0 true))) (and (= C.k@1 (store C.k call6formal@node@0 k)) (= C.next@1 (store C.next call6formal@node@0 null)))) (and (and (= C.prev@1 (store C.prev call6formal@node@0 null)) (= Br@5 (store Br call6formal@node@0 true))) (and (= C.next@2 (store C.next@1 call6formal@node@0 x)) (=> (not (= (select C.next@1 call6formal@node@0) null)) (= Br@6 (store (store Br@5 call6formal@node@0 true) (select C.next@1 call6formal@node@0) true)))))) (=> (and (and (and (and (and (=> (= (select C.next@1 call6formal@node@0) null) (= Br@6 (store Br@5 call6formal@node@0 true))) (= C.prev@2 (store C.prev@1 call6formal@node@0 null))) (and (=> (not (= (select C.prev@1 call6formal@node@0) null)) (= Br@7 (store (store Br@6 call6formal@node@0 true) (select C.prev@1 call6formal@node@0) true))) (=> (= (select C.prev@1 call6formal@node@0) null) (= Br@7 (store Br@6 call6formal@node@0 true))))) (and (and (= call1formal@keys@0@@0 (store (ite (= (select C.next@2 call6formal@node@0) null) EmptyKeySet (select C.keys (select C.next@2 call6formal@node@0))) (select C.k@1 call6formal@node@0) true)) (= C.keys@1 (store C.keys call6formal@node@0 call1formal@keys@0@@0))) (and (=> (not (= (select C.prev@2 call6formal@node@0) null)) (= Br@8 (store (store Br@7 call6formal@node@0 true) (select C.prev@2 call6formal@node@0) true))) (=> (= (select C.prev@2 call6formal@node@0) null) (= Br@8 (store Br@7 call6formal@node@0 true)))))) (and (and (and (= call1formal@repr@0@@0 (store (ite (= (select C.next@2 call6formal@node@0) null) EmptyRefSet (select C.repr (select C.next@2 call6formal@node@0))) call6formal@node@0 true)) (= C.repr@1 (store C.repr call6formal@node@0 call1formal@repr@0@@0))) (and (=> (not (= (select C.prev@2 call6formal@node@0) null)) (= Br@9 (store (store Br@8 call6formal@node@0 true) (select C.prev@2 call6formal@node@0) true))) (=> (= (select C.prev@2 call6formal@node@0) null) (= Br@9 (store Br@8 call6formal@node@0 true))))) (and (and (= C.sorted@1 (store C.sorted call6formal@node@0 true)) (=> (not (= (select C.prev@2 call6formal@node@0) null)) (= Br@10 (store (store Br@9 call6formal@node@0 true) (select C.prev@2 call6formal@node@0) true)))) (and (=> (= (select C.prev@2 call6formal@node@0) null) (= Br@10 (store Br@9 call6formal@node@0 true))) (= C.prev@3 (store C.prev@2 x call6formal@node@0)))))) (and (and (and (and (=> (not (= (select C.prev@2 x) null)) (= Br@11 (store (store Br@10 x true) (select C.prev@2 x) true))) (=> (= (select C.prev@2 x) null) (= Br@11 (store Br@10 x true)))) (and (=> (and (not (= x null)) (=> (not (= x null)) (and (and (=> (not (= (select C.prev@3 x) null)) (and (not (select (select C.repr@1 x) (select C.prev@3 x))) (= (select C.next@2 (select C.prev@3 x)) x))) (=> (= (select C.next@2 x) null) (and (KeySetsEqual (select C.keys@1 x) (store EmptyKeySet (select C.k@1 x) true)) (RefSetsEqual (select C.repr@1 x) (store EmptyRefSet x true))))) (=> (not (= (select C.next@2 x) null)) (and (and (and (and (and (and (select (select C.repr@1 x) (select C.next@2 x)) (not (select (select C.repr@1 (select C.next@2 x)) x))) (KeySetsEqual (select C.keys@1 x) (store (select C.keys@1 (select C.next@2 x)) (select C.k@1 x) true))) (RefSetsEqual (select C.repr@1 x) (store (select C.repr@1 (select C.next@2 x)) x true))) (= (select C.prev@3 (select C.next@2 x)) x)) (=> (select C.sorted@1 x) (<= (select C.k@1 x) (select C.k@1 (select C.next@2 x))))) (= (select C.sorted@1 x) (select C.sorted@1 (select C.next@2 x)))))))) (= Br@12 (store Br@11 x false))) (=> (or (= x null) (not (=> (not (= x null)) (and (and (=> (not (= (select C.prev@3 x) null)) (and (not (select (select C.repr@1 x) (select C.prev@3 x))) (= (select C.next@2 (select C.prev@3 x)) x))) (=> (= (select C.next@2 x) null) (and (KeySetsEqual (select C.keys@1 x) (store EmptyKeySet (select C.k@1 x) true)) (RefSetsEqual (select C.repr@1 x) (store EmptyRefSet x true))))) (=> (not (= (select C.next@2 x) null)) (and (and (and (and (and (and (select (select C.repr@1 x) (select C.next@2 x)) (not (select (select C.repr@1 (select C.next@2 x)) x))) (KeySetsEqual (select C.keys@1 x) (store (select C.keys@1 (select C.next@2 x)) (select C.k@1 x) true))) (RefSetsEqual (select C.repr@1 x) (store (select C.repr@1 (select C.next@2 x)) x true))) (= (select C.prev@3 (select C.next@2 x)) x)) (=> (select C.sorted@1 x) (<= (select C.k@1 x) (select C.k@1 (select C.next@2 x))))) (= (select C.sorted@1 x) (select C.sorted@1 (select C.next@2 x))))))))) (= Br@12 Br@11)))) (and (and (=> (and (not (= call6formal@node@0 null)) (=> (not (= call6formal@node@0 null)) (and (and (=> (not (= (select C.prev@3 call6formal@node@0) null)) (and (not (select (select C.repr@1 call6formal@node@0) (select C.prev@3 call6formal@node@0))) (= (select C.next@2 (select C.prev@3 call6formal@node@0)) call6formal@node@0))) (=> (= (select C.next@2 call6formal@node@0) null) (and (KeySetsEqual (select C.keys@1 call6formal@node@0) (store EmptyKeySet (select C.k@1 call6formal@node@0) true)) (RefSetsEqual (select C.repr@1 call6formal@node@0) (store EmptyRefSet call6formal@node@0 true))))) (=> (not (= (select C.next@2 call6formal@node@0) null)) (and (and (and (and (and (and (select (select C.repr@1 call6formal@node@0) (select C.next@2 call6formal@node@0)) (not (select (select C.repr@1 (select C.next@2 call6formal@node@0)) call6formal@node@0))) (KeySetsEqual (select C.keys@1 call6formal@node@0) (store (select C.keys@1 (select C.next@2 call6formal@node@0)) (select C.k@1 call6formal@node@0) true))) (RefSetsEqual (select C.repr@1 call6formal@node@0) (store (select C.repr@1 (select C.next@2 call6formal@node@0)) call6formal@node@0 true))) (= (select C.prev@3 (select C.next@2 call6formal@node@0)) call6formal@node@0)) (=> (select C.sorted@1 call6formal@node@0) (<= (select C.k@1 call6formal@node@0) (select C.k@1 (select C.next@2 call6formal@node@0))))) (= (select C.sorted@1 call6formal@node@0) (select C.sorted@1 (select C.next@2 call6formal@node@0)))))))) (= Br@13 (store Br@12 call6formal@node@0 false))) (=> (or (= call6formal@node@0 null) (not (=> (not (= call6formal@node@0 null)) (and (and (=> (not (= (select C.prev@3 call6formal@node@0) null)) (and (not (select (select C.repr@1 call6formal@node@0) (select C.prev@3 call6formal@node@0))) (= (select C.next@2 (select C.prev@3 call6formal@node@0)) call6formal@node@0))) (=> (= (select C.next@2 call6formal@node@0) null) (and (KeySetsEqual (select C.keys@1 call6formal@node@0) (store EmptyKeySet (select C.k@1 call6formal@node@0) true)) (RefSetsEqual (select C.repr@1 call6formal@node@0) (store EmptyRefSet call6formal@node@0 true))))) (=> (not (= (select C.next@2 call6formal@node@0) null)) (and (and (and (and (and (and (select (select C.repr@1 call6formal@node@0) (select C.next@2 call6formal@node@0)) (not (select (select C.repr@1 (select C.next@2 call6formal@node@0)) call6formal@node@0))) (KeySetsEqual (select C.keys@1 call6formal@node@0) (store (select C.keys@1 (select C.next@2 call6formal@node@0)) (select C.k@1 call6formal@node@0) true))) (RefSetsEqual (select C.repr@1 call6formal@node@0) (store (select C.repr@1 (select C.next@2 call6formal@node@0)) call6formal@node@0 true))) (= (select C.prev@3 (select C.next@2 call6formal@node@0)) call6formal@node@0)) (=> (select C.sorted@1 call6formal@node@0) (<= (select C.k@1 call6formal@node@0) (select C.k@1 (select C.next@2 call6formal@node@0))))) (= (select C.sorted@1 call6formal@node@0) (select C.sorted@1 (select C.next@2 call6formal@node@0))))))))) (= Br@13 Br@12))) (and (= C.sorted@3 C.sorted@1) (= C.repr@4 C.repr@1)))) (and (and (and (= C.keys@4 C.keys@1) (= Br@23 Br@13)) (and (= alloc@3 alloc@1) (= C.k@3 C.k@1))) (and (and (= C.next@5 C.next@2) (= C.prev@7 C.prev@3)) (and (= ret@0 call6formal@node@0) (= (ControlFlow 0 13) 2)))))) GeneratedUnifiedExit_correct))))) (let ((anon8_Else_correct (=> (not (= x null)) (and (=> (= (ControlFlow 0 24) 13) anon9_Then_correct) (=> (= (ControlFlow 0 24) 23) anon9_Else_correct))))) (let ((anon8_Then_correct (=> (= x null) (=> (and (not (= call6formal@node@0@@0 null)) (not (select alloc call6formal@node@0@@0))) (=> (and (and (= alloc@0 (store alloc call6formal@node@0@@0 true)) (= C.k@0 (store C.k call6formal@node@0@@0 k))) (and (= C.next@0 (store C.next call6formal@node@0@@0 null)) (= C.prev@0 (store C.prev call6formal@node@0@@0 null)))) (=> (and (and (and (= Br@0 (store Br call6formal@node@0@@0 true)) (= call1formal@keys@0@@1 (store EmptyKeySet k true))) (and (= C.keys@0 (store C.keys call6formal@node@0@@0 call1formal@keys@0@@1)) (=> (not (= (select C.prev@0 call6formal@node@0@@0) null)) (= Br@1 (store (store Br@0 call6formal@node@0@@0 true) (select C.prev@0 call6formal@node@0@@0) true))))) (and (and (=> (= (select C.prev@0 call6formal@node@0@@0) null) (= Br@1 (store Br@0 call6formal@node@0@@0 true))) (= call1formal@repr@0@@1 (store EmptyRefSet call6formal@node@0@@0 true))) (and (= C.repr@0 (store C.repr call6formal@node@0@@0 call1formal@repr@0@@1)) (=> (not (= (select C.prev@0 call6formal@node@0@@0) null)) (= Br@2 (store (store Br@1 call6formal@node@0@@0 true) (select C.prev@0 call6formal@node@0@@0) true)))))) (=> (and (and (and (and (=> (= (select C.prev@0 call6formal@node@0@@0) null) (= Br@2 (store Br@1 call6formal@node@0@@0 true))) (= C.sorted@0 (store C.sorted call6formal@node@0@@0 true))) (and (=> (not (= (select C.prev@0 call6formal@node@0@@0) null)) (= Br@3 (store (store Br@2 call6formal@node@0@@0 true) (select C.prev@0 call6formal@node@0@@0) true))) (=> (= (select C.prev@0 call6formal@node@0@@0) null) (= Br@3 (store Br@2 call6formal@node@0@@0 true))))) (and (and (=> (and (not (= call6formal@node@0@@0 null)) (=> (not (= call6formal@node@0@@0 null)) (and (and (=> (not (= (select C.prev@0 call6formal@node@0@@0) null)) (and (not (select (select C.repr@0 call6formal@node@0@@0) (select C.prev@0 call6formal@node@0@@0))) (= (select C.next@0 (select C.prev@0 call6formal@node@0@@0)) call6formal@node@0@@0))) (=> (= (select C.next@0 call6formal@node@0@@0) null) (and (KeySetsEqual (select C.keys@0 call6formal@node@0@@0) (store EmptyKeySet (select C.k@0 call6formal@node@0@@0) true)) (RefSetsEqual (select C.repr@0 call6formal@node@0@@0) (store EmptyRefSet call6formal@node@0@@0 true))))) (=> (not (= (select C.next@0 call6formal@node@0@@0) null)) (and (and (and (and (and (and (select (select C.repr@0 call6formal@node@0@@0) (select C.next@0 call6formal@node@0@@0)) (not (select (select C.repr@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0))) (KeySetsEqual (select C.keys@0 call6formal@node@0@@0) (store (select C.keys@0 (select C.next@0 call6formal@node@0@@0)) (select C.k@0 call6formal@node@0@@0) true))) (RefSetsEqual (select C.repr@0 call6formal@node@0@@0) (store (select C.repr@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0 true))) (= (select C.prev@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0)) (=> (select C.sorted@0 call6formal@node@0@@0) (<= (select C.k@0 call6formal@node@0@@0) (select C.k@0 (select C.next@0 call6formal@node@0@@0))))) (= (select C.sorted@0 call6formal@node@0@@0) (select C.sorted@0 (select C.next@0 call6formal@node@0@@0)))))))) (= Br@4 (store Br@3 call6formal@node@0@@0 false))) (=> (or (= call6formal@node@0@@0 null) (not (=> (not (= call6formal@node@0@@0 null)) (and (and (=> (not (= (select C.prev@0 call6formal@node@0@@0) null)) (and (not (select (select C.repr@0 call6formal@node@0@@0) (select C.prev@0 call6formal@node@0@@0))) (= (select C.next@0 (select C.prev@0 call6formal@node@0@@0)) call6formal@node@0@@0))) (=> (= (select C.next@0 call6formal@node@0@@0) null) (and (KeySetsEqual (select C.keys@0 call6formal@node@0@@0) (store EmptyKeySet (select C.k@0 call6formal@node@0@@0) true)) (RefSetsEqual (select C.repr@0 call6formal@node@0@@0) (store EmptyRefSet call6formal@node@0@@0 true))))) (=> (not (= (select C.next@0 call6formal@node@0@@0) null)) (and (and (and (and (and (and (select (select C.repr@0 call6formal@node@0@@0) (select C.next@0 call6formal@node@0@@0)) (not (select (select C.repr@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0))) (KeySetsEqual (select C.keys@0 call6formal@node@0@@0) (store (select C.keys@0 (select C.next@0 call6formal@node@0@@0)) (select C.k@0 call6formal@node@0@@0) true))) (RefSetsEqual (select C.repr@0 call6formal@node@0@@0) (store (select C.repr@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0 true))) (= (select C.prev@0 (select C.next@0 call6formal@node@0@@0)) call6formal@node@0@@0)) (=> (select C.sorted@0 call6formal@node@0@@0) (<= (select C.k@0 call6formal@node@0@@0) (select C.k@0 (select C.next@0 call6formal@node@0@@0))))) (= (select C.sorted@0 call6formal@node@0@@0) (select C.sorted@0 (select C.next@0 call6formal@node@0@@0))))))))) (= Br@4 Br@3))) (and (= C.sorted@3 C.sorted@0) (= C.repr@4 C.repr@0)))) (and (and (and (= C.keys@4 C.keys@0) (= Br@23 Br@4)) (and (= alloc@3 alloc@0) (= C.k@3 C.k@0))) (and (and (= C.next@5 C.next@0) (= C.prev@7 C.prev@0)) (and (= ret@0 call6formal@node@0@@0) (= (ControlFlow 0 12) 2))))) GeneratedUnifiedExit_correct))))))) (let ((anon0_correct (=> (=> (not (= x null)) (and (and (and (select alloc x) (=> (not (= (select C.next x) null)) (select alloc (select C.next x)))) (=> (not (= (select C.prev x) null)) (select alloc (select C.prev x)))) (RefSetSubset (select C.repr x) alloc))) (and (=> (= (ControlFlow 0 25) 12) anon8_Then_correct) (=> (= (ControlFlow 0 25) 24) anon8_Else_correct))))) (let ((PreconditionGeneratedEntry_correct (=> (and (and (RefSetsEqual Br EmptyRefSet) (=> (not (= x null)) (and (and (=> (not (= (select C.prev x) null)) (and (not (select (select C.repr x) (select C.prev x))) (= (select C.next (select C.prev x)) x))) (=> (= (select C.next x) null) (and (KeySetsEqual (select C.keys x) (store EmptyKeySet (select C.k x) true)) (RefSetsEqual (select C.repr x) (store EmptyRefSet x true))))) (=> (not (= (select C.next x) null)) (and (and (and (and (and (and (select (select C.repr x) (select C.next x)) (not (select (select C.repr (select C.next x)) x))) (KeySetsEqual (select C.keys x) (store (select C.keys (select C.next x)) (select C.k x) true))) (RefSetsEqual (select C.repr x) (store (select C.repr (select C.next x)) x true))) (= (select C.prev (select C.next x)) x)) (=> (select C.sorted x) (<= (select C.k x) (select C.k (select C.next x))))) (= (select C.sorted x) (select C.sorted (select C.next x)))))))) (and (=> (not (= x null)) (select C.sorted x)) (= (ControlFlow 0 26) 25))) anon0_correct))) PreconditionGeneratedEntry_correct))))))))))))))))
(check-sat)
(pop 1)
