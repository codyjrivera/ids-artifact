
Benchmarking data structure single-linked-list with Boogie:
============================================================
00h00m00.62s    (single-linked-list::impact-sets)
00h00m00.76s    (single-linked-list::append)
00h00m00.72s    (single-linked-list::copy-all)
00h00m00.76s    (single-linked-list::delete-all)
00h00m00.60s    (single-linked-list::find)
00h00m00.72s    (single-linked-list::insert-back)
00h00m00.67s    (single-linked-list::insert-front)
00h00m00.76s    (single-linked-list::insert)
00h00m00.80s    (single-linked-list::reverse)

Benchmarking data structure sorted-list with Boogie:
============================================================
00h00m00.65s    (sorted-list::impact-sets)
00h00m00.82s    (sorted-list::delete-all)
00h00m00.62s    (sorted-list::find)
00h00m00.80s    (sorted-list::insert)
00h00m00.90s    (sorted-list::merge)
00h00m00.90s    (sorted-list::reverse)

Benchmarking data structure sorted-list-minmax with Boogie:
============================================================
00h00m00.68s    (sorted-list-minmax::impact-sets)
00h00m00.99s    (sorted-list-minmax::concatenate)
00h00m00.69s    (sorted-list-minmax::find-last)

Benchmarking data structure circular-list with Boogie:
============================================================
00h00m00.75s    (circular-list::impact-sets)
00h00m01.08s    (circular-list::insert-front)
00h00m01.09s    (circular-list::insert-back)
00h00m01.10s    (circular-list::delete-front)
00h00m01.13s    (circular-list::delete-back)

Benchmarking data structure binary-search-tree with Boogie:
============================================================
00h00m00.70s    (binary-search-tree::impact-sets)
00h00m00.74s    (binary-search-tree::find)
00h00m01.32s    (binary-search-tree::insert)
00h00m01.53s    (binary-search-tree::delete)
00h00m02.18s    (binary-search-tree::remove-root)

Benchmarking data structure treap with Boogie:
============================================================
00h00m00.72s    (treap::impact-sets)
00h00m00.71s    (treap::find)
00h00m05.69s    (treap::insert)
00h00m01.55s    (treap::delete)
00h00m02.98s    (treap::remove-root)

Benchmarking data structure avl-tree with Boogie:
============================================================
00h00m00.76s    (avl-tree::impact-sets)
00h00m02.28s    (avl-tree::insert)
00h00m02.84s    (avl-tree::delete)
00h00m00.78s    (avl-tree::find-min)
00h00m02.78s    (avl-tree::balance)

Benchmarking data structure red-black-tree with Boogie:
============================================================
00h00m00.79s    (red-black-tree::impact-sets)
00h00m26.84s    (red-black-tree::insert)
00h00m03.21s    (red-black-tree::delete)
00h00m00.78s    (red-black-tree::find-min)
00h00m04.07s    (red-black-tree::delete-left-fixup)
00h00m04.05s    (red-black-tree::delete-right-fixup)

Benchmarking data structure bst-scaffolding with Boogie:
============================================================
00h00m00.85s    (bst-scaffolding::impact-sets)
00h00m02.42s    (bst-scaffolding::delete-inside)
00h00m05.78s    (bst-scaffolding::remove-root)
00h00m01.08s    (bst-scaffolding::fix-depth)

Benchmarking data structure scheduler-queue with Boogie:
============================================================
00h00m01.34s    (scheduler-queue::impact-sets)
00h00m01.38s    (scheduler-queue::move-request)
00h00m01.02s    (scheduler-queue::list-remove-first)
00h00m02.94s    (scheduler-queue::bst-delete-inside)
00h00m08.56s    (scheduler-queue::bst-remove-root)
00h00m01.25s    (scheduler-queue::bst-fix-depth)
