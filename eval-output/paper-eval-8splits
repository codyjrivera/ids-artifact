
Benchmarking data structure single-linked-list with Boogie:
============================================================
00h00m00.53s    (single-linked-list::impact-sets)
00h00m00.73s    (single-linked-list::append)
00h00m00.65s    (single-linked-list::copy-all)
00h00m00.65s    (single-linked-list::delete-all)
00h00m00.56s    (single-linked-list::find)
00h00m00.65s    (single-linked-list::insert-back)
00h00m00.58s    (single-linked-list::insert-front)
00h00m00.66s    (single-linked-list::insert)
00h00m00.71s    (single-linked-list::reverse)

Benchmarking data structure sorted-list with Boogie:
============================================================
00h00m00.54s    (sorted-list::impact-sets)
00h00m00.73s    (sorted-list::delete-all)
00h00m00.55s    (sorted-list::find)
00h00m00.69s    (sorted-list::insert)
00h00m00.81s    (sorted-list::merge)
00h00m00.81s    (sorted-list::reverse)

Benchmarking data structure sorted-list-minmax with Boogie:
============================================================
00h00m00.57s    (sorted-list-minmax::impact-sets)
00h00m00.85s    (sorted-list-minmax::concatenate)
00h00m00.59s    (sorted-list-minmax::find-last)

Benchmarking data structure circular-list with Boogie:
============================================================
00h00m00.63s    (circular-list::impact-sets)
00h00m00.95s    (circular-list::insert-front)
00h00m00.97s    (circular-list::insert-back)
00h00m01.02s    (circular-list::delete-front)
00h00m01.01s    (circular-list::delete-back)

Benchmarking data structure binary-search-tree with Boogie:
============================================================
00h00m00.60s    (binary-search-tree::impact-sets)
00h00m00.66s    (binary-search-tree::find)
00h00m01.17s    (binary-search-tree::insert)
00h00m01.36s    (binary-search-tree::delete)
00h00m02.06s    (binary-search-tree::remove-root)

Benchmarking data structure treap with Boogie:
============================================================
00h00m00.59s    (treap::impact-sets)
00h00m00.66s    (treap::find)
00h00m05.49s    (treap::insert)
00h00m01.41s    (treap::delete)
00h00m02.84s    (treap::remove-root)

Benchmarking data structure avl-tree with Boogie:
============================================================
00h00m00.64s    (avl-tree::impact-sets)
00h00m02.13s    (avl-tree::insert)
00h00m02.65s    (avl-tree::delete)
00h00m00.70s    (avl-tree::find-min)
00h00m02.70s    (avl-tree::balance)

Benchmarking data structure red-black-tree with Boogie:
============================================================
00h00m00.66s    (red-black-tree::impact-sets)
00h00m25.94s    (red-black-tree::insert)
00h00m03.07s    (red-black-tree::delete)
00h00m00.66s    (red-black-tree::find-min)
00h00m03.88s    (red-black-tree::delete-left-fixup)
00h00m03.85s    (red-black-tree::delete-right-fixup)

Benchmarking data structure bst-scaffolding with Boogie:
============================================================
00h00m00.67s    (bst-scaffolding::impact-sets)
00h00m02.30s    (bst-scaffolding::delete-inside)
00h00m05.55s    (bst-scaffolding::remove-root)
00h00m01.00s    (bst-scaffolding::fix-depth)

Benchmarking data structure scheduler-queue with Boogie:
============================================================
00h00m01.05s    (scheduler-queue::impact-sets)
00h00m01.23s    (scheduler-queue::move-request)
00h00m00.92s    (scheduler-queue::list-remove-first)
00h00m02.85s    (scheduler-queue::bst-delete-inside)
00h00m08.24s    (scheduler-queue::bst-remove-root)
00h00m01.14s    (scheduler-queue::bst-fix-depth)
