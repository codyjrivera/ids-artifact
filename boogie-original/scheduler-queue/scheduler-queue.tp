;; Supporting Artifact for
;; "Predictable Verification using Intrinsic Definitions"
;; by Adithya Murali, Cody Rivera, and P. Madhusudan.
;; 
;; Artifact by Cody Rivera, 2023. 
;;
;; SMT2-LIB transplant file for Scheduler Queue (overlay of list and BST).

;; Set library implementation
; Remove old declarations of set operations.
(delete EmptyKeySet)
(delete KeySetMember)
(delete KeySetAddF)
(delete KeySetRemoveF)
(delete KeySetIntersectF)
(delete KeySetUnionF)
(delete KeySetComF)
(delete KeySetDiffF)
(delete KeySetSubset)
(delete KeySetsEqual)
(delete KeySetsDisjoint)

(delete EmptyRefSet)
(delete RefSetMember)
(delete RefSetAddF)
(delete RefSetRemoveF)
(delete RefSetIntersectF)
(delete RefSetUnionF)
(delete RefSetComF)
(delete RefSetDiffF)
(delete RefSetSubset)
(delete RefSetsEqual)
(delete RefSetsDisjoint)

; Define basic set operations.
(replace
    T@Ref
    (declare-sort T@Ref 0)

    ; base set functions, for key sets (of Int).
    (define-fun EmptyKeySet () (Array Int Bool) ((as const (Array Int Bool)) false))
    (define-fun KeySetMember ((x Int) (s (Array Int Bool))) Bool (select s x))
    (define-fun KeySetAddF ((s (Array Int Bool)) (x Int)) (Array Int Bool)  (store s x true))
    (define-fun KeySetRemoveF ((s (Array Int Bool)) (x Int)) (Array Int Bool)  (store s x false))
    (define-fun KeySetIntersectF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map and) s1 s2))
    (define-fun KeySetUnionF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) ((_ map or) s1 s2))
    (define-fun KeySetComF ((s (Array Int Bool))) (Array Int Bool) ((_ map not) s))
    (define-fun KeySetDiffF ((s1 (Array Int Bool)) (s2 (Array Int Bool))) (Array Int Bool) (KeySetIntersectF s1 (KeySetComF s2)))
    (define-fun KeySetSubset ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetDiffF s1 s2)))
    (define-fun KeySetsEqual ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= s1 s2))
    (define-fun KeySetsDisjoint ((s1 (Array Int Bool)) (s2 (Array Int Bool))) Bool (= EmptyKeySet (KeySetIntersectF s1 s2)))

    ; base set functions, for reference sets (of T@Ref).
    (define-fun EmptyRefSet () (Array T@Ref Bool) ((as const (Array T@Ref Bool)) false))
    (define-fun RefSetMember ((x T@Ref) (s (Array T@Ref Bool))) Bool (select s x))
    (define-fun RefSetAddF ((s (Array T@Ref Bool)) (x T@Ref)) (Array T@Ref Bool)  (store s x true))
    (define-fun RefSetRemoveF ((s (Array T@Ref Bool)) (x T@Ref)) (Array T@Ref Bool)  (store s x false))
    (define-fun RefSetIntersectF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map and) s1 s2))
    (define-fun RefSetUnionF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map or) s1 s2))
    (define-fun RefSetComF ((s (Array T@Ref Bool))) (Array T@Ref Bool) ((_ map not) s))
    (define-fun RefSetDiffF ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) (Array T@Ref Bool) (RefSetIntersectF s1 (RefSetComF s2)))
    (define-fun RefSetSubset ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetDiffF s1 s2)))
    (define-fun RefSetsEqual ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= s1 s2))
    (define-fun RefSetsDisjoint ((s1 (Array T@Ref Bool)) (s2 (Array T@Ref Bool))) Bool (= EmptyRefSet (RefSetIntersectF s1 s2))))

;; Definition of framing functions
(replace
    Frame_k
    (define-fun Frame_k ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int)
        ((_ map (ite (Bool Int Int) (Int))) mod post pre)))
(replace
    Frame_l
    (define-fun Frame_l ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_r
    (define-fun Frame_r ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_p
    (define-fun Frame_p ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_min
    (define-fun Frame_min ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int)
        ((_ map (ite (Bool Int Int) (Int))) mod post pre)))
(replace
    Frame_max
    (define-fun Frame_max ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int)
        ((_ map (ite (Bool Int Int) (Int))) mod post pre)))
(replace
    Frame_bst_size
    (define-fun Frame_bst_size ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int)
        ((_ map (ite (Bool Int Int) (Int))) mod post pre)))
(replace
    Frame_bst_keys
    (define-fun Frame_bst_keys ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array Int Bool))) (post (Array T@Ref (Array Int Bool)))) (Array T@Ref (Array Int Bool))
        ((_ map (ite (Bool (Array Int Bool) (Array Int Bool)) (Array Int Bool))) mod post pre)))
(replace
    Frame_bst_repr
    (define-fun Frame_bst_repr ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array T@Ref Bool))) (post (Array T@Ref (Array T@Ref Bool)))) (Array T@Ref (Array T@Ref Bool))
        ((_ map (ite (Bool (Array T@Ref Bool) (Array T@Ref Bool)) (Array T@Ref Bool))) mod post pre)))
(replace
    Frame_bst_depth
    (define-fun Frame_bst_depth ((mod (Array T@Ref Bool)) (pre (Array T@Ref Int)) (post (Array T@Ref Int))) (Array T@Ref Int)
        ((_ map (ite (Bool Int Int) (Int))) mod post pre)))
(replace
    Frame_bst_root
    (define-fun Frame_bst_root ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_next
    (define-fun Frame_next ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_prev
    (define-fun Frame_prev ((mod (Array T@Ref Bool)) (pre (Array T@Ref T@Ref)) (post (Array T@Ref T@Ref))) (Array T@Ref T@Ref)
        ((_ map (ite (Bool T@Ref T@Ref) (T@Ref))) mod post pre)))
(replace
    Frame_list_keys
    (define-fun Frame_list_keys ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array Int Bool))) (post (Array T@Ref (Array Int Bool)))) (Array T@Ref (Array Int Bool))
        ((_ map (ite (Bool (Array Int Bool) (Array Int Bool)) (Array Int Bool))) mod post pre)))
(replace
    Frame_list_repr
    (define-fun Frame_list_repr ((mod (Array T@Ref Bool)) (pre (Array T@Ref (Array T@Ref Bool))) (post (Array T@Ref (Array T@Ref Bool)))) (Array T@Ref (Array T@Ref Bool))
        ((_ map (ite (Bool (Array T@Ref Bool) (Array T@Ref Bool)) (Array T@Ref Bool))) mod post pre)))

;; Removal of (get-info) commands from SMT2 input.
(remove-get-info)
