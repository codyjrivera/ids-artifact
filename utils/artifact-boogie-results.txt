
Benchmarking data structure single-linked-list with Boogie:
============================================================
00h00m00.95s    (single-linked-list::impact-sets)
00h00m01.04s    (single-linked-list::append)
00h00m01.03s    (single-linked-list::copy-all)
00h00m01.07s    (single-linked-list::delete-all)
00h00m00.96s    (single-linked-list::find)
00h00m01.06s    (single-linked-list::insert-back)
00h00m01.01s    (single-linked-list::insert-front)
00h00m01.08s    (single-linked-list::insert)
00h00m01.10s    (single-linked-list::reverse)

Benchmarking data structure sorted-list with Boogie:
============================================================
00h00m00.97s    (sorted-list::impact-sets)
00h00m01.11s    (sorted-list::delete-all)
00h00m00.97s    (sorted-list::find)
00h00m01.11s    (sorted-list::insert)
00h00m01.15s    (sorted-list::merge)
00h00m01.17s    (sorted-list::reverse)

Benchmarking data structure sorted-list-minmax with Boogie:
============================================================
00h00m00.98s    (sorted-list-minmax::impact-sets)
00h00m01.20s    (sorted-list-minmax::concatenate)
00h00m01.01s    (sorted-list-minmax::find-last)

Benchmarking data structure circular-list with Boogie:
============================================================
00h00m01.08s    (circular-list::impact-sets)
00h00m01.26s    (circular-list::insert-front)
00h00m01.31s    (circular-list::insert-back)
00h00m01.27s    (circular-list::delete-front)
00h00m01.28s    (circular-list::delete-back)

Benchmarking data structure binary-search-tree with Boogie:
============================================================
00h00m01.01s    (binary-search-tree::impact-sets)
00h00m01.03s    (binary-search-tree::find)
00h00m01.64s    (binary-search-tree::insert)
00h00m01.83s    (binary-search-tree::delete)
00h00m02.74s    (binary-search-tree::remove-root)

Benchmarking data structure treap with Boogie:
============================================================
00h00m01.02s    (treap::impact-sets)
00h00m01.03s    (treap::find)
00h00m09.13s    (treap::insert)
00h00m02.06s    (treap::delete)
00h00m04.41s    (treap::remove-root)

Benchmarking data structure avl-tree with Boogie:
============================================================
00h00m01.05s    (avl-tree::impact-sets)
00h00m04.05s    (avl-tree::insert)
00h00m04.24s    (avl-tree::delete)
00h00m01.06s    (avl-tree::find-min)
00h00m03.99s    (avl-tree::balance)

Benchmarking data structure red-black-tree with Boogie:
============================================================
00h00m01.06s    (red-black-tree::impact-sets)
00h01m13.05s    (red-black-tree::insert)
00h00m04.72s    (red-black-tree::delete)
00h00m01.07s    (red-black-tree::find-min)
00h00m07.85s    (red-black-tree::delete-left-fixup)
00h00m06.32s    (red-black-tree::delete-right-fixup)

Benchmarking data structure bst-scaffolding with Boogie:
============================================================
00h00m01.12s    (bst-scaffolding::impact-sets)
00h00m03.66s    (bst-scaffolding::delete-inside)
00h00m09.03s    (bst-scaffolding::remove-root)
00h00m01.23s    (bst-scaffolding::fix-depth)

Benchmarking data structure scheduler-queue with Boogie:
============================================================
00h00m01.51s    (scheduler-queue::impact-sets)
00h00m01.40s    (scheduler-queue::move-request)
00h00m01.17s    (scheduler-queue::list-remove-first)
00h00m03.39s    (scheduler-queue::bst-delete-inside)
00h00m13.45s    (scheduler-queue::bst-remove-root)
00h00m01.34s    (scheduler-queue::bst-fix-depth)
